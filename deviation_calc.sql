SELECT
COUNTRY AS CNTRY_NM,
CHANNELS AS CHANNEL_TYPE,
COALESCE((TOTAL_CUSTOMERS - BACKUP_TOTAL_CUSTOMERS) / NULLIF(BACKUP_TOTAL_CUSTOMERS, 0), 1.0) AS DEVIATION_ID,
/* ABS((BACKUP_TOTAL_CUSTOMERS - TOTAL_CUSTOMERS) / BACKUP_TOTAL_CUSTOMERS) AS DEVIATION_ID, */
COALESCE((REACH - BACKUP_REACH) / NULLIF(BACKUP_REACH, 0), 1.0) AS DEVIATION_REACH,
/* ABS((BACKUP_REACH - REACH) / BACKUP_REACH) AS DEVIATION_REACH, */
COALESCE((INTERACTION - BACKUP_INTERACTION) / NULLIF(BACKUP_INTERACTION, 0), 1.0) AS DEVIATION_INTERACTION,
/* ABS((BACKUP_INTERACTION - INTERACTION) / BACKUP_INTERACTION) AS DEVIATION_INTERACTION, */
COALESCE((ENGAGEMENT - BACKUP_ENGAGEMENT) / NULLIF(BACKUP_ENGAGEMENT, 0), 1.0) AS DEVIATION_ENGAGEMENT,
/* ABS((BACKUP_ENGAGEMENT - ENGAGEMENT) / BACKUP_ENGAGEMENT) AS DEVIATION_ENGAGEMENT, */
CASE WHEN (ABS(DEVIATION_ID) > ${THRESHOLD} OR ABS(DEVIATION_REACH) > ${THRESHOLD} OR ABS(DEVIATION_INTERACTION) > ${THRESHOLD} OR ABS(DEVIATION_ENGAGEMENT) > ${THRESHOLD}) THEN 'FAILED' ELSE 'PASS' END AS CHECK_LIST

FROM (

    SELECT * FROM "${projectKey}"."${projectKey}_SQL_QA_TABLE_MONTHLY" AS NEW
        LEFT JOIN 
            (SELECT 
             "CNTRY_NM" AS COUNTRY,
             "CHANNEL_TYPE" AS CHANNELS,
             "TOTAL_CUSTOMERS" AS BACKUP_TOTAL_CUSTOMERS,
             "REACH"AS BACKUP_REACH,
             "INTERACTION" AS BACKUP_INTERACTION, 
             "ENGAGEMENT" AS BACKUP_ENGAGEMENT 
             FROM "${projectKey}"."${projectKey}_SQL_QA_BACKUP_TABLE_MONTHLY_SF") AS BACKUP
        ON NEW."CNTRY_NM" = COUNTRY AND NEW."CHANNEL_TYPE" = CHANNELS
)
